name: Build MLIR Tools with Torch-MLIR

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  BUILD_TYPE: Release
  # Cache version - increment to invalidate all caches
  CACHE_VERSION: v1

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180  # 3 hours max
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux build with Ninja (faster)
          - os: ubuntu-22.04
            generator: "NINJA"
            python-version: "3.10"
            cache-prefix: "linux-ninja"
            cc: "clang-14"
            cxx: "clang++-14"
            
          # Windows build with MSVC
          - os: windows-2022
            generator: "MSVC" 
            python-version: "3.10"
            cache-prefix: "windows-msvc"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1  # Shallow clone for speed

    # ============================================================================
    # Platform-specific setup
    # ============================================================================
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ninja-build \
          cmake \
          clang-14 \
          clang++-14 \
          libc++-14-dev \
          libc++abi-14-dev \
          lld-14 \
          python3.10-dev \
          python3.10-venv
        
        # Set up compiler alternatives
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        choco install ninja --no-progress

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install "pybind11>=2.10" "nanobind>=2.4" numpy
        
        # Verify installations
        echo "Verifying Python package installations..."
        python -c "import pybind11; print(f'✅ pybind11 {pybind11.__version__} installed')"
        python -c "import nanobind; print(f'✅ nanobind {nanobind.__version__} installed')"  
        python -c "import numpy; print(f'✅ numpy {numpy.__version__} installed')"
        
        # Show Python executable path for debugging
        echo "Python executable: $(which python || where python)"
        python --version

    - name: Setup MSVC environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # ============================================================================
    # Cache Configuration - Multi-level caching strategy
    # ============================================================================

    # Cache 1: Python packages
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python*/site-packages
          ~/AppData/Local/pip/Cache
        key: python-deps-${{ matrix.cache-prefix }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          python-deps-${{ matrix.cache-prefix }}-${{ env.CACHE_VERSION }}-

    # Cache 2: LLVM/MLIR build (most expensive part)
    - name: Cache LLVM build
      id: cache-llvm
      uses: actions/cache@v4
      with:
        path: |
          build/llvm
          build/tools/torch-mlir
        key: llvm-build-${{ matrix.cache-prefix }}-${{ env.CACHE_VERSION }}-${{ hashFiles('ext/torch-mlir/externals/llvm-project/llvm/CMakeLists.txt', 'ext/torch-mlir/externals/llvm-project/mlir/CMakeLists.txt', 'ext/torch-mlir/CMakeLists.txt') }}
        restore-keys: |
          llvm-build-${{ matrix.cache-prefix }}-${{ env.CACHE_VERSION }}-

    # Cache 3: CMake configuration
    - name: Cache CMake configuration
      uses: actions/cache@v4
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
        key: cmake-config-${{ matrix.cache-prefix }}-${{ env.CACHE_VERSION }}-${{ hashFiles('CMakeLists.txt', 'src/CMakeLists.txt') }}

    # ============================================================================
    # Build Process
    # ============================================================================
    
    - name: Create build directory
      run: |
        cmake -E make_directory build
        # Clear any cached CMake files that might contain wrong Python paths
        rm -f build/CMakeCache.txt 2>/dev/null || true

    - name: Configure CMake
      working-directory: build
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        # Set Python executable path based on OS
        if [ "$RUNNER_OS" = "Linux" ]; then
          PYTHON_EXE=$(which python3.10)
        else
          PYTHON_EXE=$(which python)
        fi
        
        echo "Using Python: $PYTHON_EXE"
        
        # Verify Python executable exists and works
        if [ ! -f "$PYTHON_EXE" ]; then
          echo "❌ ERROR: Python executable not found at: $PYTHON_EXE"
          echo "Available Python executables:"
          if [ "$RUNNER_OS" = "Windows" ]; then
            where python python.exe python3 python3.exe 2>/dev/null || echo "No Python found in PATH"
            ls -la /c/hostedtoolcache/windows/Python/*/x64/ 2>/dev/null || echo "No hostedtoolcache Python found"
          else
            which python python3 python3.10 2>/dev/null || echo "No Python found in PATH"
          fi
          exit 1
        fi
        
        echo "Verifying Python environment..."
        $PYTHON_EXE --version
        $PYTHON_EXE -c "import sys; print(f'Python sys.executable: {sys.executable}')"
        $PYTHON_EXE -c "import pybind11; print(f'pybind11: {pybind11.__version__}')"
        $PYTHON_EXE -c "import nanobind; print(f'nanobind: {nanobind.__version__}')"
        $PYTHON_EXE -c "import numpy; print(f'numpy: {numpy.__version__}')"
        
        # Convert to CMake-friendly path on Windows
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Convert /c/path to C:/path format for CMake
          PYTHON_EXE_CMAKE=$(echo "$PYTHON_EXE" | sed 's|^/c/|C:/|')
          echo "CMake Python path: $PYTHON_EXE_CMAKE"
        else
          PYTHON_EXE_CMAKE="$PYTHON_EXE"
        fi
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_GENERATOR_IDENTIFIER=${{ matrix.generator }} \
          -DTORCH_MLIR_ENABLE_STABLEHLO=OFF \
          -DPYTHON_EXECUTABLE="$PYTHON_EXE_CMAKE" \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DLLVM_TARGETS_TO_BUILD=host \
          -DLLVM_BUILD_EXAMPLES=OFF \
          -DLLVM_BUILD_TESTS=OFF \
          -DLLVM_INCLUDE_TESTS=OFF
      shell: bash

    - name: Check cache hit and build strategy
      run: |
        if [ "${{ steps.cache-llvm.outputs.cache-hit }}" = "true" ]; then
          echo "✅ LLVM cache hit! This should be a fast incremental build."
          echo "INCREMENTAL_BUILD=true" >> $GITHUB_ENV
        else
          echo "❌ LLVM cache miss. This will be a full build (~2 hours)."
          echo "INCREMENTAL_BUILD=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build torch-mlir (Full Build)
      if: env.INCREMENTAL_BUILD == 'false'
      working-directory: build
      run: |
        echo "🔨 Starting full torch-mlir build (this will take ~2 hours)..."
        
        # Build with limited parallelism to avoid memory issues
        if [ "$RUNNER_OS" = "Linux" ]; then
          cmake --build . --target torch-mlir-opt --parallel 2
        else
          cmake --build . --target torch-mlir-opt --config ${{ env.BUILD_TYPE }} --parallel 1
        fi
      shell: bash

    - name: Build torch-mlir (Incremental Build)
      if: env.INCREMENTAL_BUILD == 'true'
      working-directory: build
      run: |
        echo "⚡ Running incremental build (should be fast)..."
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          cmake --build . --target torch-mlir-opt --parallel 4
        else
          cmake --build . --target torch-mlir-opt --config ${{ env.BUILD_TYPE }} --parallel 2
        fi
      shell: bash

    - name: Build custom tools
      working-directory: build
      run: |
        echo "🔧 Building custom tools..."
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          cmake --build . --target onnx-c-importer --parallel 4
        else
          cmake --build . --target onnx-c-importer --config ${{ env.BUILD_TYPE }} --parallel 2
        fi
      shell: bash

    # ============================================================================
    # Testing and Validation
    # ============================================================================
    
    - name: Run basic smoke tests
      working-directory: build
      run: |
        echo "🧪 Running smoke tests..."
        
        # Check if key binaries exist
        if [ "$RUNNER_OS" = "Linux" ]; then
          ls -la llvm/bin/mlir-opt 2>/dev/null || echo "❌ mlir-opt not found"
          ls -la llvm/bin/torch-mlir-opt 2>/dev/null || echo "❌ torch-mlir-opt not found"
          ls -la onnx-c-importer 2>/dev/null || echo "❌ onnx-c-importer not found"
          
          # Test basic functionality
          if [ -f "llvm/bin/torch-mlir-opt" ]; then
            echo "✅ Testing torch-mlir-opt --help"
            ./llvm/bin/torch-mlir-opt --help | head -10
          fi
        else
          dir llvm\bin\mlir-opt.exe 2>nul || echo "❌ mlir-opt.exe not found"
          dir llvm\bin\torch-mlir-opt.exe 2>nul || echo "❌ torch-mlir-opt.exe not found"
          dir ${{ env.BUILD_TYPE }}\onnx-c-importer.exe 2>nul || echo "❌ onnx-c-importer.exe not found"
          
          # Test basic functionality
          if exist "llvm\bin\torch-mlir-opt.exe" (
            echo "✅ Testing torch-mlir-opt.exe --help"
            llvm\bin\torch-mlir-opt.exe --help
          )
        fi
      shell: bash

    - name: Test Python bindings
      working-directory: build
      run: |
        echo "🐍 Testing Python bindings..."
        
        # Look for Python packages
        find . -name "*torch_mlir*" -type d 2>/dev/null || echo "No torch_mlir directories found"
        
        # Try to import torch_mlir if we can find it
        TORCH_MLIR_PATH=$(find . -path "*/python_packages/torch_mlir" -type d 2>/dev/null | head -1)
        if [ -n "$TORCH_MLIR_PATH" ]; then
          echo "Found torch_mlir at: $TORCH_MLIR_PATH"
          python -c "import sys; sys.path.insert(0, '$TORCH_MLIR_PATH'); import torch_mlir; print('✅ torch_mlir import successful')" || echo "❌ torch_mlir import failed"
        else
          echo "⚠️  torch_mlir Python package not found (this may be expected for incomplete builds)"
        fi
      shell: bash

    # ============================================================================
    # Artifacts and Cleanup
    # ============================================================================
    
    - name: Collect build artifacts
      if: always()
      run: |
        mkdir -p artifacts
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          # Copy binaries
          if [ -d "build/llvm/bin" ]; then
            cp -r build/llvm/bin artifacts/llvm-bin
          fi
          
          # Copy our custom tools
          if [ -f "build/onnx-c-importer" ]; then
            mkdir -p artifacts/custom-tools
            cp build/onnx-c-importer artifacts/custom-tools/
          fi
        else
          # Windows binaries
          if [ -d "build/llvm/bin" ]; then
            cp -r build/llvm/bin artifacts/llvm-bin
          fi
          
          # Copy our custom tools
          if [ -f "build/${{ env.BUILD_TYPE }}/onnx-c-importer.exe" ]; then
            mkdir -p artifacts/custom-tools
            cp "build/${{ env.BUILD_TYPE }}/onnx-c-importer.exe" artifacts/custom-tools/
          fi
        fi
        
        # Create build info
        echo "Build Information" > artifacts/build-info.txt
        echo "=================" >> artifacts/build-info.txt
        echo "OS: $RUNNER_OS" >> artifacts/build-info.txt
        echo "Generator: ${{ matrix.generator }}" >> artifacts/build-info.txt
        echo "Build Type: ${{ env.BUILD_TYPE }}" >> artifacts/build-info.txt
        echo "Cache Hit: ${{ steps.cache-llvm.outputs.cache-hit }}" >> artifacts/build-info.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/build-info.txt
        echo "Date: $(date)" >> artifacts/build-info.txt
      shell: bash

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mlir-tools-${{ matrix.cache-prefix }}-${{ github.sha }}
        path: artifacts/
        retention-days: 7

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.cache-prefix }}-${{ github.sha }}
        path: |
          build/**/*.log
          build/**/CMakeFiles/*.log
          build/**/CMakeOutput.log
          build/**/CMakeError.log
        retention-days: 14

    - name: Report build timing
      if: always()
      run: |
        echo "🕐 Build Summary"
        echo "==============="
        if [ "${{ env.INCREMENTAL_BUILD }}" = "true" ]; then
          echo "✅ Incremental build completed (cache hit)"
          echo "⏱️  Total time: Fast build due to caching"
        else
          echo "🔨 Full build completed (cache miss)"
          echo "⏱️  Total time: ~2 hours (initial build)"
        fi
        echo "📦 Cache status: LLVM cache ${{ steps.cache-llvm.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"

  # ============================================================================
  # Build Summary
  # ============================================================================
  
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "🎯 Build Summary"
        echo "==============="
        
        if [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ Some builds failed"
          echo ""
          echo "Common issues:"
          echo "- StableHLO compilation errors on Windows (should be disabled)"
          echo "- Memory exhaustion during LLVM build (use cache or reduce parallelism)"
          echo "- Python environment issues (check Python executable detection)"
          exit 1
        elif [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ All builds successful!"
          echo ""
          echo "Next steps:"
          echo "- Download artifacts to test the tools locally"
          echo "- Check that both torch-mlir-opt and onnx-c-importer are working"
        else
          echo "⚠️  Build status: ${{ needs.build.result }}"
        fi

    - name: Cache effectiveness report
      run: |
        echo ""
        echo "📊 Cache Information"
        echo "==================="
        echo "This workflow uses aggressive caching to speed up builds:"
        echo ""
        echo "🔄 Cache Levels:"
        echo "  1. Python packages (~5MB, saves 2-3 minutes)"
        echo "  2. LLVM/MLIR build (~2GB, saves 1.5-2 hours)"
        echo "  3. CMake configuration (~50MB, saves 5-10 minutes)"
        echo ""
        echo "⏱️  Expected Times:"
        echo "  • First build (cache miss): ~2 hours"
        echo "  • Cached build (cache hit): ~10-15 minutes"
        echo "  • Incremental changes: ~5-10 minutes"
        echo ""
        echo "🗑️  To clear caches:"
        echo "  • Increment CACHE_VERSION in the workflow file"
        echo "  • Or delete caches manually in GitHub repository settings"
        echo ""
        echo "Current cache version: ${{ env.CACHE_VERSION }}"
